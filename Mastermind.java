import java.util.Arrays;
import java.util.Scanner;

public class Mastermind {

    static boolean cheatMode = true;
    static Scanner keyboard = new Scanner(System.in);

    public static void main(String[] args)

    {
        printIdentification();
        interactiveMenu();
    }

    /**
     *Student Information
     */
    private static void printIdentification()
    {
        System.out.println("### Mastermind   Author: Nava M ###");
        System.out.println("### St.# -  ###");
        System.out.println("### Purpose: To attempt to guess a computer generated array ### \n");
    } // printIdentification

    /**
     * This method initiates prompts for the program to provide a more cohesive program.
     * Has cheat mode activated so the computer generated array can be viewed easily.
     * Has an interactive menu when exit is not initiated and attemptCounter is less than 12
     * Game loop will break when either numberOfCorrectGuesses is the maximum value it can be
     * and declaring winner OR when the attemptCounter equals 12.
     */
    private static void interactiveMenu(){

        final char EXIT = 'E';
        char command = ' ';

        int lowerLimit = 2; // Minimum size of array
        int upperLimit = 10; // Maximum size of array

        System.out.println("Welcome to Mastermind, where the user will try and guess a random list of number generated by the computer");

        int [] myArray = getRandomArray(inputUser(lowerLimit,upperLimit, "size of the list")); // prompt size of array

        if (cheatMode)
        {
            System.out.println("This is the random array" + Arrays.toString(myArray));
        }// prints randomly generate array


        int attemptCounter = 0;

        //Interactive menu
        while (command != EXIT && attemptCounter<12){

            int numberOfCorrectGuesses = guessingSecret(myArray);
            if (numberOfCorrectGuesses == myArray.length ){

                System.out.println("Congratulations, you guessed right! You win! ");
                break;
            }//winner
            attemptCounter++;
            if (attemptCounter == 12){
                System.out.println("You lose :( You have exceeded your maximum number of attempts. Thanks for playing!");
                break;
            }//loser

            System.out.println("Press Any Key to Continue ");
            System.out.println("Press E to Exit the program");

            command = keyboard.next().toUpperCase().charAt(0);

        }
    }

    /**
     * This method asks user for a single integer value and checks it is within desired range.
     * It also includes a feature to include 'whatAreWeSearchFor' which helps in identifying
     * what were asking for. This is for clarity purposes.
     * @param start An integer, lower limit of range of values
     * @param end An integer, upper limit of range of values
     * @param whatAreWeSearchFor A string to indicate what you're looking for. Used for printing purposes.
     * @return Value of use integer
     */

    private static int inputUser( int start, int end, String whatAreWeSearchFor){

        int userInteger;

        do{
            System.out.printf("Please enter the %s between %d and %d:  %n",whatAreWeSearchFor, start, end );
            while (!keyboard.hasNextInt()){

                System.out.printf("Sorry that is not an integer, please enter the %s between %d and %d: %n", whatAreWeSearchFor, start, end);
                keyboard.nextLine();
            }
            userInteger = keyboard.nextInt();

        }while( userInteger > end || userInteger < start);

        return userInteger;
    }

    /**
     *This method receives the user input of the size of desired array,
     *makes an array with this size and inputs a random number between 1-9.
     *It also does a linear search to ensure that the number inserted each time
     *is unique.
     * @param inputUser
     * @return
     */
    private static int[] getRandomArray(int inputUser){

        int[] randomArray = new int[inputUser];

        int index = 0;
        while(index<inputUser){

            int randomNumber = (int) (Math.random() * 10);

            if (linearSearch(randomArray, randomNumber, 0, index)==-1){

                randomArray[index]= (int) (randomNumber);

                index++;
            } // fill only when number not there (search first) then, fill with random number
        }
        return randomArray;
    }

    /**
     *This is linear search method where it takes a target and compares every
     *item in the list to the target to find it. If target is found the program
     * will return the index, if not it'll return -1.
     *
     * @param list An array
     * @param target a single value
     * @param start the beginning of the array inclusive
     * @param end the end of the array exclusive
     * @return index if target found; -1 if not found
     */
    private static int linearSearch (int[] list, int target, int start, int end){

        for (int index = start; index<end; index++){

            if (list[index] == target)
            {
                return index;
            }
        }
        return -1;
    }// Linear search: if target found return index otherwise return 1

    /**
     *This method will take a random array, and the guess generated array.
     *It will compare the two methods in two ways.
     *It will increase correctDigitAndPlace if the digit index and digit itself match.
     *It will also increase correctDigitOnly if the digit is contained in the array but not at the same index.
     * Both counts will be printed
     *
     * @param randomArray the random array generated by the computer
     * @return the count of correctDigitAndPlace, important for determining the winner.
     */
    private static int guessingSecret(int[] randomArray){

        System.out.println("What is your guess?");
        int[] userGuess = askingGuesses(randomArray.length);


        int correctDigitAndPlace = 0;
        int correctDigitOnly = 0;
        for( int index = 0; index < userGuess.length; index++){

            if (userGuess[index]==randomArray[index]){
                correctDigitAndPlace++;
            }
            else if(linearSearch(randomArray, userGuess[index], 0, randomArray.length)!= -1){

                correctDigitOnly++;
            }
        }
        System.out.println("Number of digits that are correct and in their right places are " + correctDigitAndPlace);
        System.out.println("Number of digits are correct but not in their right places are " + correctDigitOnly);

        return correctDigitAndPlace;
    }

    /**
     *This method takes an integer for size, creates an array.
     *It then prompts the user using inputUser to obtain the numbers to fill the array.
     *It will ask until the array is filled.
     *It will also check if all the numbers are unique otherwise an error message will pop up.
     *
     * @param size The size of the array for the guess array. This is the same size as the user input
     * @return array filled with user's guesses
     */

    private static int[] askingGuesses(int size){

        int[] guessArray = new int[size];

        int index = 0;
        while(index<size){

            int userNumber = inputUser(0,9, "guess number " + (index+1));

            if (linearSearch(guessArray, userNumber, 0, index)==-1){

                guessArray[index]= userNumber;

                index++;
            } // fill only when number not there (search first) then, fill with random number
            else {
                System.out.println("Sorry please enter a none repeat number.");
            }
        }
        return guessArray;
    }// generating a user specific array,


}
